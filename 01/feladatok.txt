Készítsük el a lehető legrövidebb Java fordítási egységet.

class A{}
Fordítsuk is le!

javac A.java
===========================================================================

2. feladat
Készítsük el a SKIP program megfelelőjét Javában!

class Skip {
    public static void main( String[] args ){
    }
}
Fordítsuk és futtassuk!

javac Skip.java
java Skip
===========================================================================

3. feladat
Készítsünk programot, amely a billentyűzetről kéri be a felhasználó nevét, majd üdvözli! Használjuk az alábbi két parancsot!

System.console().readLine()
System.console().printf(...)
===========================================================================

4. feladat
Készítsünk programot, amely a felhasználónevet parancssori argumentumként kapja, majd üdvözli a felhasználót! A szabványos kimenetre történő kiírás ezzel a paranccsal is elvégezhető - ezt használjuk majdnem mindig.

System.out.println(...)
===========================================================================

5. feladat
Az alábbi Java program feladata, hogy kiírja az 1-től 4-ig lévő számok felét.

Az elvárt kimenet:

0.5
1.0
1.5
2.0
Kiirtam 4 szamot
Javítsa ki a programot!

class Print {
    public static void main() {
        for( int i = 1; i < 4; i++ ) {
            System.out.Println(i/2);
        }
        i = 4;
        System.out.println("Kiirtam " + i + " szamot")
    }
}
===========================================================================

6. feladat
Készítsünk programot, amely bekér két egész számot, és kiírja a köztük lévő egész számok felét. A beolvasás során kapott sztringeket egész számmá az alábbi konverziós függvénnyel alakíthatjuk át.

Integer.parseInt(...)
===========================================================================

7. feladat
Készítsünk egy programot, amely kiszámolja két egész szám összegét, különbségét, szorzatát, hányadosát, és az osztási maradékot is megadja! Figyeljen a nullával való osztásra (ez esetben ne végezze el az osztást)! A két számot parancssori paraméterként kell megadni. Vizsgáljuk meg azt is, hogy megfelelő számú parancssori paramétert adtunk–e át!
===========================================================================

8. feladat
Írjuk meg az n faktoriálisát kiszámoló programot.
===========================================================================
1. gyakorló feladat
Készítsünk programot, amely a parancssori argumentumában megadott számról eldönti, hogy tökéletes–e! A számelméletben tökéletes számnak nevezzük azokat a természetes számokat, amelyek megegyeznek az önmaguknál kisebb osztóik összegével (vagyis az összes osztóik összege a szám kétszerese). Az első négy ilyen szám: 6, 28, 496 és 8128.

2. gyakorló feladat
Módosítsuk az előző megoldásunkat úgy, hogy 1–től a paraméterként megadott határig minden egész számra vizsgálja a tökéletességet és megadja, hogy abban az intervallumban mennyi ilyet talált! Ha nem talált egyetlen ilyen számot sem, akkor írja ki, hogy egyetlen tökéletes szám sincs a megadott intervallumban.

3. gyakorló feladat
Számoljuk ki a parancssori argumentumként kapott egész számok legnagyobb közös osztóját! (Nem csak 2 számét, hanem az összes kapott számét!)

A paraméterként kapott egész számok és az eredmény is legyen long típusú. Sztringeket ilyen típusú értékre a Long.parseLong(...) függvénnyel alakíthatunk.