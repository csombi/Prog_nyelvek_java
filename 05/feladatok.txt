1. feladat
Módosítsuk a Pontok tömegközéppontja feladat megoldását úgy, hogy minden létrehozott Point objektumnak legyen egyedi azonosító száma (id, egész szám), amely számozás kezdődjön 1-től. Ehhez tárolja a Point osztályban egy statikus adattagban, hogy a következő példányosításkor mi legyen a létrehozott pont ID-ja, majd példányosításkor növelje meg ezt az adattagot. A pont toString() metódusa tartalmazza a pont ID-jét is.
========================================================================================================================

2. feladat
Szervezze az 1. feladat megoldását a mass csomagba. A főprogram legyen a mass.Main osztály, a pont osztály pedig a mass.util.Point osztály.

a
A generált fájlokból készítsen JAR archívumot mass-deploy.jar néven. Futtassa a Java programot az mass-deploy.jar archívumból a java programmal. A -classpath kapcsolóval adja meg a JAR archívumban lévő Java program belépési pontját.

// JAR fájl létrehozása ezekkel az osztályokkal: mass/PointMain.class mass/util/Point.class 
jar -cf mass-deploy.jar mass/PointMain.class mass/util/Point.class 

// JAR fájl futtatása a main osztály megadásával 
java -classpath mass-deploy.jar mass.PointMain
b
Készítsen manifest fájlt a mass csomaghoz, melyben rögzíti, hogy a program belépési pontja a mass.Main osztály. Készítsen JAR archívumot, amely a manifest fájl alapján tudja magáról a belépési pontját. Futtassa a JAR archívumban lévő Java programot a java program -jar kapcsolójával.

A manifest fájl tartalma:

Main-Class: mass.PointMain

A fájl legutolsó sora nem kerül értelmezésre

// JAR fájl létrehozása a mass/PointMain.class mass/util/Point.class osztályokkal és META-INF/MANIFEST.MF manifest fájllal 
jar cmvf META-INF/MANIFEST.MF mass-deploy.jar mass/PointMain.class mass/util/Point.class 

// JAR fájl futtatása 
java -jar mass-deploy.jar
========================================================================================================================

3. feladat
Készítse el a WildAnimal.java fájlba a WildAnimal felsorolási típust (enum-ot), amelyben legyen négy felsorolási tag: majom, elefánt, zsiráf és mosómedve. Az állatok konstruktorában első paraméternek megkapják azt, hogy melyik gyümölcsöt szeretik enni, második paraméterként pedig azt, hogy mennyi lenne ideális esetben egy napi adagjuk az adott gyümölcsből.

Készítse el a listAllAnimals() metódust, amely egy ilyen formátumú szöveggel tér vissza:

"A vadállat sorszáma: a vadállat neve szeretne enni a vadállat gyümölcse egy héten."

Például, ha az elefánt megadott napi mennyisége 30 málna volt:
"2: Elefánt szeretne enni 210 málnát egy héten."

Az enum elemeinek bejárásához használja a values(), illetve a sorszám lekérdezéséhez az ordinal() metódust.

Készítsen saját toString() metódust, amely az adott enum elem által meghívott állatról írja ki az információkat.

Próbálja ki az elkészített felsorolási típust és a hozzátartozó metódusokat egy Main osztályban.
========================================================================================================================

4. feladat
Írjon dokumentációs megjegyzést az 1. feladat függvényeihez, amiben leírja röviden a funkcionalitását. Tartalmazza legalább az alábbi címkéket:

@param
@return
Készítsen az osztályhoz is dokumentációs megjegyzést. Tartalmazza az @author, @version, @since tageket.

A javadoc program segítségével generáljon HTML dokumentációt a Java programhoz.
========================================================================================================================

1. gyakorló feladat
Készítsünk egy, a nemek ábrázolásához használt Gender nevű felsorolási típust! Ebben szerepeljen két érték, amelyek rendre Gender.MALE (férfi) és Gender.FEMALE (nő). Készítsünk Person névvel egy olyan osztályt, amelyben nyilvántartjuk a személyi adatokat! A rögzíteni kívánt adatok: a személy vezeték és keresztneve (mindkettő String), foglalkozása (String), neme (Gender) és születési éve (int).

Legyen a Person osztálynak egy olyan konstruktora, mely ezeket az adatokat paraméterként kapja.

Egészítsük ki a Person osztályt egy toString() metódussal, amely String típusú értékké alakítja az adott objektum belső állapotát! Készítsünk egy equals() nevű metódust a Person osztályhoz, amely eldönti a paraméterként megadott másik Person objektumról, hogy megegyezik-e az aktuális példánnyal. Vigyázzunk arra, hogy mivel referenciát adunk át paraméterként, az lehet (többnyire véletlenül) null érték is! Ilyenkor értelemszerűen az eredménye hamis lesz.

Tegyük az eddigi osztályokat a person csomagba és készítsünk hozzá egy főprogramot, amelyben létrehozunk két Person objektumot, megvizsgáljuk, hogy ugyanarról a két személyről van-e szó és az eredményt kiírjuk a szabványos kimenetre! A főprogram kerüljön a main csomagba!

2. gyakorló feladat (ez a feladat volt már feladva.)
Készítsünk egy basics.Matrix osztályt (valós számokat tartalmazó kétdimenziós tömb mint mátrix segítségével), amelynek a következő műveletei vannak: M × N méretű nullmátrix konstruálása, M × N méretű mátrix konstruálása M × N méretű tömb segítségével, N × N dimenziós egységmátrix létrehozása (az eredmény mátrix legyen visszatérési érték), mátrix transzponáltjának ill. két mátrix összegének, különbségének kiszámítása, a mátrix sztringként történő ábrázolása (java.lang.StringBuilder-t használjunk a szöveg előállításához).

Készítsünk főprogramot (Main.java) is, amely teszteli ezen műveleteket!

3. gyakorló feladat
Készítsen egy TelevisionShop felsorolási típust. A felsorolási tagok legyenek SAMSUNG, LG, SKYWORTH, SONY, SHARP. A konstruktorukban az első tag legyen, hogy hány db készülék van az adott márkából raktáron, a második és a harmadik az elérhető átmérők minimuma és maximuma legyen. Készítsen hozzá olyan metódusokat, amelyekkel ki tudja íratni az összes lehetséges kapható méret minimumát és maximumát típustól függetlenül (statikus) és olyat, amely adott márkára kiírja, hogy mekkora méretű tévéket lehet kapni. Készítsen statikus metódust, amellyel kiírja a rendelkezésre álló készletről minden tudhatót!

Használja a final kulcsszót, ahol lehet!

4. gyakorló feladat
Bővítse a 4. feladatsor 2. gyakorló feladat megoldását a következő metódusokkal:

A vektorhoz lehessen hozzáadni egy újabb elemet. Itt figyeljünk rá, hogy a mérete dinamikusan növekedjen (ha megtelt a tömb, akkor csináljunk egy segédtömböt 2x akkora mérettel, másoljuk át az elemeket és állítsuk át a számokat tároló tömb referenciáját a segédtömbére).

Legyen egy statikus sum() függvénye, amely vár két IntVector objektumot és összeadja őket, majd visszatér az eredmény referenciájával.

5. gyakorló feladat
Készítsen egy tetszőlegesen választott gyakorló feladat forráskódjához JavaDoc dokumentációs megjegyzéseket. A kommentek tartalmazzanak információkat a metódusok paramétereiről és visszatérési értékeiről. Generáljon HTML fájlt a JavaDoc programmal.